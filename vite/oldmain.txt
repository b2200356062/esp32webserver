#include <Arduino.h>
#include <ESPAsyncWebServer.h>
#include <SPIFFS.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <WebServer.h>

const char* ssid = "telefon";
const char* password = "123456789";

const char* apssid = "ESP32";
const char* appassword = "12345678";


const char* mqtt_server = "broker.emqx.io";
const char* mqttusername = "emqx";
const char* mqttpassword = "public";
const char* topic = "topic/mqttx";
const int mqttport = 1883;

WiFiClient espClient;
PubSubClient client(espClient);

AsyncWebServer server(80);
AsyncWebSocket ws("/chat");

void onWsEvent(AsyncWebSocket * server, AsyncWebSocketClient * client, AwsEventType type, void * arg, uint8_t *data, size_t len){
  
  if(type == WS_EVT_CONNECT){
  
    Serial.println("Websocket client connection received");
     
  } else if(type == WS_EVT_DISCONNECT){
 
    Serial.println("Client disconnected");
  
  } else if(type == WS_EVT_DATA){
  
    ws.textAll(data, len);
 
    Serial.print("Data received: ");
  
    for(int i=0; i < len; i++) {
          Serial.print((char) data[i]);
    }
  
    Serial.println();
  }
}

void callback(char *topic, byte *payload, unsigned int length);

void setup() {

  Serial.begin(115200);

  if (!SPIFFS.begin(true)){
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }
  
  WiFi.disconnect();
  
  WiFi.begin(ssid, password);
  int count = 0;

  while(WiFi.status() != WL_CONNECTED){
    delay(1000);
    Serial.println("Connecting to WiFi");
    count++;
    if(count == 30){
      ESP.restart();
    }
  }

  WiFi.softAP(apssid, appassword);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  Serial.print("wifi local ip: ");
  Serial.println(WiFi.localIP());

  ws.onEvent(onWsEvent);
  server.addHandler(&ws);
  
  server.on("/chat", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/chat.html", "text/html");
  });
  
  // server.on("/chat.js", HTTP_GET, [](AsyncWebServerRequest *request){
  //   request->send(SPIFFS, "/chat.js", "text/javascript");
  // });

  client.setServer(mqtt_server, mqttport);



  client.setCallback(callback);
  
  while (!client.connected()) {
      String client_id = "esp32-client-";
      client_id += String(WiFi.macAddress());
      Serial.printf("The client %s connects to the public MQTT broker\n", client_id.c_str());
      if (client.connect(client_id.c_str(), mqttusername, mqttpassword)) {
          Serial.println("Public EMQX MQTT broker connected");
      } else {
          Serial.print("failed with state ");
          Serial.print(client.state());
          Serial.print(" ");
          delay(2000);
      }
  }  
  client.subscribe(topic);
  Serial.print("Write your message:");
  
  server.begin();
  wifiserver.begin();

}

void callback(char *topic, byte *payload, unsigned int length) {

    Serial.print("Message arrived in topic: ");
    Serial.println(topic);
    Serial.print("Message:");
    for (int i = 0; i < length; i++) {
        Serial.print((char) payload[i]);
    }
    Serial.println();
    Serial.println("-----------------------");

    Serial.print("Write your message:");
}

const byte numChars = 32;
char recievedChars[numChars];
boolean newData = false;

void loop() {
  
  static byte ndx = 0;
  char endMarker = '\n';
  char rc;
  
  while (Serial.available() > 0 && newData == false) {

      rc = Serial.read();
      delay(10);
      
      if (rc != endMarker) {
          recievedChars[ndx] = rc;
          ndx++;
          if (ndx >= numChars) {
              ndx = numChars - 1;
          }
      }
      else {
          recievedChars[ndx] = '\0'; // terminate the string
          ndx = 0;
          newData = true;
      }
  }
  if(newData == true){

    client.publish(topic, recievedChars);
    newData = false;
  }

  client.loop();
}


  // File file = SPIFFS.open("/index.html");

  // if(!file){
  //   Serial.printf("Faile to open file %s", file.name());
  //   return;
  // }


  // Serial.println("File Content:");

  // while(file.available()){
  //   Serial.write(file.read());
  // }


  // file.close();

  // server.serveStatic("/", SPIFFS, "/").setDefaultFile("index.html");

  // server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
  //   request->send(SPIFFS, "/index.html", "text/html");
  // });

  // server.on("/demo.js", HTTP_GET, [](AsyncWebServerRequest *request){
  //     request->send(SPIFFS, "/demo.js", "text/javascript");
  // });

  // server.begin();